@model  AdminEditProductViewModel
@Html.HiddenFor(model => model.ProductClass)
<div class="form-group">
    @Html.LabelFor(model => model.Name)
    @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control" } })
    @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
</div>

<div class="form-group">
    @Html.LabelFor(model => model.Category)
    @Html.DropDownListFor(model => model.Category, Model.Categories, new { @class = "form-control" })
    @Html.ValidationMessageFor(model => model.Category, "", new { @class = "text-danger" })
</div>
<div class="form-group">
    @Html.LabelFor(model => model.Image)
    @Html.EditorFor(model => model.Image, new { htmlAttributes = new { @class = "form-control" } })
    @Html.ValidationMessageFor(model => model.Image, "", new { @class = "text-danger" })
    <script>
        FileManage.replace("Image", { Muti: true });
    </script>
</div>
@if (Model.AllAttribute != null)
{
    for (int i = 0; i < Model.AllAttribute.Count; i++)
    {
        <div class="form-group">
            <label for="AllAttribute_@(i)_@Model.AllAttribute[i].Name">@Html.LanguageString("Product.Attribute." + Model.AllAttribute[i].Name)</label>
            <input type="hidden" value="@Model.AllAttribute[i].AttriId" name="AllAttribute[@i].AttriId" />
            @if (Model.AllAttribute[i].ValueType == 0)
            {
                <input class="form-control text-box single-line" id="AllAttribute_@(i)_@Model.AllAttribute[i].Name" name="AllAttribute[@i].Value" type="text" value="@Model.AllAttribute[i].Value">
            }
            else if (Model.AllAttribute[i].ValueType == 1)
            {
                <input class="form-control text-box single-line" id="AllAttribute_@(i)_@Model.AllAttribute[i].Name" name="AllAttribute[@i].Value" type="number" value="@Model.AllAttribute[i].Value">
            }
            else if (Model.AllAttribute[i].ValueType == 2)
            {
                <select class="form-control text-box single-line" id="AllAttribute_@(i)_@Model.AllAttribute[i].Name" name="AllAttribute[@i].Value">
                    @if (Model.AllAttribute[i].IsNull)
                    {
                        <option value=""></option>
                    }
                    @if (Model.AllAttribute[i].ValueOptions != null)
                    {
                        foreach (string iit in Model.AllAttribute[i].ValueOptions)
                        {
                            <option value="@iit" @(@Model.AllAttribute[i].Value == iit ? "selected=\"selected\"" : "" )>@iit</option>
                        }
                    }
                </select>
            }

        </div>
    }
}

<div class="form-group">
    @Html.LabelFor(model => model.Content)
    @Html.TextAreaFor(model => model.Content, new { @class = "form-control" })
    @Html.ValidationMessageFor(model => model.Content, "", new { @class = "text-danger" })
    <script>
        CKEDITOR.replace("Content");
    </script>
</div>

@*<div class="form-group">
        @Html.LabelFor(model => model.IsSticky, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            <div class="checkbox">
                @Html.EditorFor(model => model.IsSticky)
                @Html.ValidationMessageFor(model => model.IsSticky, "", new { @class = "text-danger" })
            </div>
        </div>
    </div>*@

@*<div class="form-group">
        @Html.LabelFor(model => model.IsLocked, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            <div class="checkbox">
                @Html.EditorFor(model => model.IsLocked)
                @Html.ValidationMessageFor(model => model.IsLocked, "", new { @class = "text-danger" })
            </div>
        </div>
    </div>*@



@*<div class="form-group">
        @Html.LabelFor(model => model.Tags, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.Tags, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.Tags, "", new { @class = "text-danger" })
        </div>
    </div>*@

@*<div class="form-group">
        @Html.LabelFor(model => model.PollCloseAfterDays, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.PollCloseAfterDays, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.PollCloseAfterDays, "", new { @class = "text-danger" })
        </div>
    </div>*@

@*<div class="form-group">
        @Html.LabelFor(model => model.SubscribeToTopic, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            <div class="checkbox">
                @Html.EditorFor(model => model.SubscribeToTopic)
                @Html.ValidationMessageFor(model => model.SubscribeToTopic, "", new { @class = "text-danger" })
            </div>
        </div>
    </div>*@

@*<div class="form-group">
        @Html.LabelFor(model => model.TopicId, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.TopicId, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.TopicId, "", new { @class = "text-danger" })
        </div>
    </div>*@

@*<div class="form-group">
        @Html.LabelFor(model => model.IsTopicStarter, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            <div class="checkbox">
                @Html.EditorFor(model => model.IsTopicStarter)
                @Html.ValidationMessageFor(model => model.IsTopicStarter, "", new { @class = "text-danger" })
            </div>
        </div>
    </div>*@

